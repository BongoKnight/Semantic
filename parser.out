Created by PLY version 3.10 (http://www.dabeaz.com/ply)

Unused terminals:

    IF
    RETURN

Grammar

Rule 0     S' -> programme
Rule 1     programme -> MAIN LPAREN enum RPAREN LACO commande FINISH PRINT LPAREN expression RPAREN RACO
Rule 2     enum -> ID
Rule 3     enum -> ID COMMA enum
Rule 4     empty -> <empty>
Rule 5     commande -> ID AFFECT expression
Rule 6     commande -> commande END commande
Rule 7     commande -> WHILE LPAREN expression RPAREN LACO commande RACO
Rule 8     expression -> NUMBER
Rule 9     expression -> ID
Rule 10    expression -> expression OPBIN expression

Terminals, with rules where they appear

AFFECT               : 5
COMMA                : 3
END                  : 6
FINISH               : 1
ID                   : 2 3 5 9
IF                   : 
LACO                 : 1 7
LPAREN               : 1 1 7
MAIN                 : 1
NUMBER               : 8
OPBIN                : 10
PRINT                : 1
RACO                 : 1 7
RETURN               : 
RPAREN               : 1 1 7
WHILE                : 7
error                : 

Nonterminals, with rules where they appear

commande             : 1 6 6 7
empty                : 
enum                 : 1 3
expression           : 1 5 7 10 10
programme            : 0

Parsing method: LALR

state 0

    (0) S' -> . programme
    (1) programme -> . MAIN LPAREN enum RPAREN LACO commande FINISH PRINT LPAREN expression RPAREN RACO

    MAIN            shift and go to state 2

    programme                      shift and go to state 1

state 1

    (0) S' -> programme .



state 2

    (1) programme -> MAIN . LPAREN enum RPAREN LACO commande FINISH PRINT LPAREN expression RPAREN RACO

    LPAREN          shift and go to state 3


state 3

    (1) programme -> MAIN LPAREN . enum RPAREN LACO commande FINISH PRINT LPAREN expression RPAREN RACO
    (2) enum -> . ID
    (3) enum -> . ID COMMA enum

    ID              shift and go to state 5

    enum                           shift and go to state 4

state 4

    (1) programme -> MAIN LPAREN enum . RPAREN LACO commande FINISH PRINT LPAREN expression RPAREN RACO

    RPAREN          shift and go to state 6


state 5

    (2) enum -> ID .
    (3) enum -> ID . COMMA enum

    RPAREN          reduce using rule 2 (enum -> ID .)
    COMMA           shift and go to state 7


state 6

    (1) programme -> MAIN LPAREN enum RPAREN . LACO commande FINISH PRINT LPAREN expression RPAREN RACO

    LACO            shift and go to state 8


state 7

    (3) enum -> ID COMMA . enum
    (2) enum -> . ID
    (3) enum -> . ID COMMA enum

    ID              shift and go to state 5

    enum                           shift and go to state 9

state 8

    (1) programme -> MAIN LPAREN enum RPAREN LACO . commande FINISH PRINT LPAREN expression RPAREN RACO
    (5) commande -> . ID AFFECT expression
    (6) commande -> . commande END commande
    (7) commande -> . WHILE LPAREN expression RPAREN LACO commande RACO

    ID              shift and go to state 11
    WHILE           shift and go to state 10

    commande                       shift and go to state 12

state 9

    (3) enum -> ID COMMA enum .

    RPAREN          reduce using rule 3 (enum -> ID COMMA enum .)


state 10

    (7) commande -> WHILE . LPAREN expression RPAREN LACO commande RACO

    LPAREN          shift and go to state 13


state 11

    (5) commande -> ID . AFFECT expression

    AFFECT          shift and go to state 14


state 12

    (1) programme -> MAIN LPAREN enum RPAREN LACO commande . FINISH PRINT LPAREN expression RPAREN RACO
    (6) commande -> commande . END commande

    FINISH          shift and go to state 15
    END             shift and go to state 16


state 13

    (7) commande -> WHILE LPAREN . expression RPAREN LACO commande RACO
    (8) expression -> . NUMBER
    (9) expression -> . ID
    (10) expression -> . expression OPBIN expression

    NUMBER          shift and go to state 19
    ID              shift and go to state 18

    expression                     shift and go to state 17

state 14

    (5) commande -> ID AFFECT . expression
    (8) expression -> . NUMBER
    (9) expression -> . ID
    (10) expression -> . expression OPBIN expression

    NUMBER          shift and go to state 19
    ID              shift and go to state 18

    expression                     shift and go to state 20

state 15

    (1) programme -> MAIN LPAREN enum RPAREN LACO commande FINISH . PRINT LPAREN expression RPAREN RACO

    PRINT           shift and go to state 21


state 16

    (6) commande -> commande END . commande
    (5) commande -> . ID AFFECT expression
    (6) commande -> . commande END commande
    (7) commande -> . WHILE LPAREN expression RPAREN LACO commande RACO

    ID              shift and go to state 11
    WHILE           shift and go to state 10

    commande                       shift and go to state 22

state 17

    (7) commande -> WHILE LPAREN expression . RPAREN LACO commande RACO
    (10) expression -> expression . OPBIN expression

    RPAREN          shift and go to state 24
    OPBIN           shift and go to state 23


state 18

    (9) expression -> ID .

    RPAREN          reduce using rule 9 (expression -> ID .)
    OPBIN           reduce using rule 9 (expression -> ID .)
    FINISH          reduce using rule 9 (expression -> ID .)
    END             reduce using rule 9 (expression -> ID .)
    RACO            reduce using rule 9 (expression -> ID .)


state 19

    (8) expression -> NUMBER .

    RPAREN          reduce using rule 8 (expression -> NUMBER .)
    OPBIN           reduce using rule 8 (expression -> NUMBER .)
    FINISH          reduce using rule 8 (expression -> NUMBER .)
    END             reduce using rule 8 (expression -> NUMBER .)
    RACO            reduce using rule 8 (expression -> NUMBER .)


state 20

    (5) commande -> ID AFFECT expression .
    (10) expression -> expression . OPBIN expression

    RACO            reduce using rule 5 (commande -> ID AFFECT expression .)
    END             reduce using rule 5 (commande -> ID AFFECT expression .)
    FINISH          reduce using rule 5 (commande -> ID AFFECT expression .)
    OPBIN           shift and go to state 23


state 21

    (1) programme -> MAIN LPAREN enum RPAREN LACO commande FINISH PRINT . LPAREN expression RPAREN RACO

    LPAREN          shift and go to state 25


state 22

    (6) commande -> commande END commande .
    (6) commande -> commande . END commande

  ! shift/reduce conflict for END resolved as shift
    RACO            reduce using rule 6 (commande -> commande END commande .)
    FINISH          reduce using rule 6 (commande -> commande END commande .)
    END             shift and go to state 16

  ! END             [ reduce using rule 6 (commande -> commande END commande .) ]


state 23

    (10) expression -> expression OPBIN . expression
    (8) expression -> . NUMBER
    (9) expression -> . ID
    (10) expression -> . expression OPBIN expression

    NUMBER          shift and go to state 19
    ID              shift and go to state 18

    expression                     shift and go to state 26

state 24

    (7) commande -> WHILE LPAREN expression RPAREN . LACO commande RACO

    LACO            shift and go to state 27


state 25

    (1) programme -> MAIN LPAREN enum RPAREN LACO commande FINISH PRINT LPAREN . expression RPAREN RACO
    (8) expression -> . NUMBER
    (9) expression -> . ID
    (10) expression -> . expression OPBIN expression

    NUMBER          shift and go to state 19
    ID              shift and go to state 18

    expression                     shift and go to state 28

state 26

    (10) expression -> expression OPBIN expression .
    (10) expression -> expression . OPBIN expression

  ! shift/reduce conflict for OPBIN resolved as shift
    RPAREN          reduce using rule 10 (expression -> expression OPBIN expression .)
    FINISH          reduce using rule 10 (expression -> expression OPBIN expression .)
    END             reduce using rule 10 (expression -> expression OPBIN expression .)
    RACO            reduce using rule 10 (expression -> expression OPBIN expression .)
    OPBIN           shift and go to state 23

  ! OPBIN           [ reduce using rule 10 (expression -> expression OPBIN expression .) ]


state 27

    (7) commande -> WHILE LPAREN expression RPAREN LACO . commande RACO
    (5) commande -> . ID AFFECT expression
    (6) commande -> . commande END commande
    (7) commande -> . WHILE LPAREN expression RPAREN LACO commande RACO

    ID              shift and go to state 11
    WHILE           shift and go to state 10

    commande                       shift and go to state 29

state 28

    (1) programme -> MAIN LPAREN enum RPAREN LACO commande FINISH PRINT LPAREN expression . RPAREN RACO
    (10) expression -> expression . OPBIN expression

    RPAREN          shift and go to state 30
    OPBIN           shift and go to state 23


state 29

    (7) commande -> WHILE LPAREN expression RPAREN LACO commande . RACO
    (6) commande -> commande . END commande

    RACO            shift and go to state 31
    END             shift and go to state 16


state 30

    (1) programme -> MAIN LPAREN enum RPAREN LACO commande FINISH PRINT LPAREN expression RPAREN . RACO

    RACO            shift and go to state 32


state 31

    (7) commande -> WHILE LPAREN expression RPAREN LACO commande RACO .

    RACO            reduce using rule 7 (commande -> WHILE LPAREN expression RPAREN LACO commande RACO .)
    END             reduce using rule 7 (commande -> WHILE LPAREN expression RPAREN LACO commande RACO .)
    FINISH          reduce using rule 7 (commande -> WHILE LPAREN expression RPAREN LACO commande RACO .)


state 32

    (1) programme -> MAIN LPAREN enum RPAREN LACO commande FINISH PRINT LPAREN expression RPAREN RACO .

    $end            reduce using rule 1 (programme -> MAIN LPAREN enum RPAREN LACO commande FINISH PRINT LPAREN expression RPAREN RACO .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for END in state 22 resolved as shift
WARNING: shift/reduce conflict for OPBIN in state 26 resolved as shift
